{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.11.11","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":5407,"databundleVersionId":868283,"sourceType":"competition"},{"sourceId":11875802,"sourceType":"datasetVersion","datasetId":7463563}],"dockerImageVersionId":31040,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/elnazalikarami/house-price-prediction?scriptVersionId=245481584\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\ndataset = pd.read_excel('/kaggle/input/house-price/HousePricePrediction.xlsx')\n\nprint(dataset.head(5))","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true,"execution":{"iopub.status.busy":"2025-06-14T19:56:09.577462Z","iopub.execute_input":"2025-06-14T19:56:09.577762Z","iopub.status.idle":"2025-06-14T19:56:11.974059Z","shell.execute_reply.started":"2025-06-14T19:56:09.577728Z","shell.execute_reply":"2025-06-14T19:56:11.973129Z"}},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"Data Processing: we categorize the features depending on their datatype (int, float, object) and then calculate the number of them. ","metadata":{}},{"cell_type":"code","source":"obj = (dataset.dtypes == 'object')\nobject_cols = list(obj[obj].index)\nprint(\"Categorical variables:\",len(object_cols))\n\nint_ = (dataset.dtypes == 'int')\nnum_cols = list(int_[int_].index)\nprint(\"Integer variables:\",len(num_cols))\n\nfl = (dataset.dtypes == 'float')\nfl_cols = list(fl[fl].index)\nprint(\"Float variables:\",len(fl_cols))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-14T19:56:11.975731Z","iopub.execute_input":"2025-06-14T19:56:11.976178Z","iopub.status.idle":"2025-06-14T19:56:11.984463Z","shell.execute_reply.started":"2025-06-14T19:56:11.976154Z","shell.execute_reply":"2025-06-14T19:56:11.983317Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#heatmap\nnumerical_dataset = dataset.select_dtypes(include=['number'])\n\nplt.figure(figsize=(12, 6))\nsns.heatmap(numerical_dataset.corr(),\n            cmap = 'BrBG',\n            fmt = '.2f',\n            linewidths = 2,\n            annot = True)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-14T19:56:11.985608Z","iopub.execute_input":"2025-06-14T19:56:11.98594Z","iopub.status.idle":"2025-06-14T19:56:12.6533Z","shell.execute_reply.started":"2025-06-14T19:56:11.985911Z","shell.execute_reply":"2025-06-14T19:56:12.652096Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#bar plot\nunique_values = []\nfor col in object_cols:\n  unique_values.append(dataset[col].unique().size)\nplt.figure(figsize=(10,6))\nplt.title('No. Unique values of Categorical Features')\nplt.xticks(rotation=90)\nsns.barplot(x=object_cols,y=unique_values)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-14T19:56:12.655341Z","iopub.execute_input":"2025-06-14T19:56:12.655616Z","iopub.status.idle":"2025-06-14T19:56:12.890844Z","shell.execute_reply.started":"2025-06-14T19:56:12.655595Z","shell.execute_reply":"2025-06-14T19:56:12.889983Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"plt.figure(figsize=(18, 36))\nplt.title('Categorical Features: Distribution')\nplt.xticks(rotation=90)\nindex = 1\n\nfor col in object_cols:\n    y = dataset[col].value_counts()\n    plt.subplot(11, 4, index)\n    plt.xticks(rotation=90)\n    sns.barplot(x=list(y.index), y=y)\n    index += 1","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-14T19:56:12.891964Z","iopub.execute_input":"2025-06-14T19:56:12.892343Z","iopub.status.idle":"2025-06-14T19:56:13.564138Z","shell.execute_reply.started":"2025-06-14T19:56:12.892308Z","shell.execute_reply":"2025-06-14T19:56:13.563293Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#data cleaning\n#As Id Column will not be participating in any prediction. So we can Drop it.\ndataset.drop(['Id'],\n             axis=1,\n             inplace=True)\n#Replacing SalePrice empty values with their mean values to make the data distribution symmetric.\ndataset['SalePrice'] = dataset['SalePrice'].fillna(\n  dataset['SalePrice'].mean())\n\n#Drop records with null values \nnew_dataset = dataset.dropna()\n\n#Checking features which have null values in the new dataframe \nnew_dataset.isnull().sum()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-14T19:56:13.565366Z","iopub.execute_input":"2025-06-14T19:56:13.56568Z","iopub.status.idle":"2025-06-14T19:56:13.581587Z","shell.execute_reply.started":"2025-06-14T19:56:13.565657Z","shell.execute_reply":"2025-06-14T19:56:13.580726Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#converting object data into int\nfrom sklearn.preprocessing import OneHotEncoder\n\ns = (new_dataset.dtypes == 'object')\nobject_cols = list(s[s].index)\nprint(\"Categorical variables:\")\nprint(object_cols)\nprint('No. of. categorical features: ', \n      len(object_cols))\n\nOH_encoder = OneHotEncoder(sparse_output=False, handle_unknown='ignore')\nOH_cols = pd.DataFrame(OH_encoder.fit_transform(new_dataset[object_cols]))\nOH_cols.index = new_dataset.index\nOH_cols.columns = OH_encoder.get_feature_names_out()\ndf_final = new_dataset.drop(object_cols, axis=1)\ndf_final = pd.concat([df_final, OH_cols], axis=1)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-14T19:56:13.582818Z","iopub.execute_input":"2025-06-14T19:56:13.583321Z","iopub.status.idle":"2025-06-14T19:56:13.803797Z","shell.execute_reply.started":"2025-06-14T19:56:13.583292Z","shell.execute_reply":"2025-06-14T19:56:13.802965Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#spliting data into training and testing sets \nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.model_selection import train_test_split\n\nX = df_final.drop(['SalePrice'], axis=1)\nY = df_final['SalePrice']\n\nX_train, X_valid, Y_train, Y_valid = train_test_split(\n    X, Y, train_size=0.8, test_size=0.2, random_state=0)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-14T19:56:13.804469Z","iopub.execute_input":"2025-06-14T19:56:13.804688Z","iopub.status.idle":"2025-06-14T19:56:13.928441Z","shell.execute_reply.started":"2025-06-14T19:56:13.804671Z","shell.execute_reply":"2025-06-14T19:56:13.927518Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"### Model training \n\n# Support vector machine: \n\nfrom sklearn import svm\nfrom sklearn.svm import SVC\nfrom sklearn.metrics import mean_absolute_percentage_error\n\nmodel_SVR = svm.SVR()\nmodel_SVR.fit(X_train,Y_train)\nY_pred = model_SVR.predict(X_valid)\n\nprint(mean_absolute_percentage_error(Y_valid, Y_pred))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-14T19:56:13.929409Z","iopub.execute_input":"2025-06-14T19:56:13.929733Z","iopub.status.idle":"2025-06-14T19:56:14.397095Z","shell.execute_reply.started":"2025-06-14T19:56:13.929704Z","shell.execute_reply":"2025-06-14T19:56:14.396051Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#random forest regression \nfrom sklearn.ensemble import RandomForestRegressor\n\nmodel_RFR = RandomForestRegressor(n_estimators=10)\nmodel_RFR.fit(X_train, Y_train)\nY_pred = model_RFR.predict(X_valid)\n\nmean_absolute_percentage_error(Y_valid, Y_pred)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-14T19:56:14.399643Z","iopub.execute_input":"2025-06-14T19:56:14.399913Z","iopub.status.idle":"2025-06-14T19:56:14.893152Z","shell.execute_reply.started":"2025-06-14T19:56:14.399894Z","shell.execute_reply":"2025-06-14T19:56:14.892184Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"#linear regression: \nfrom sklearn.linear_model import LinearRegression\n\nmodel_LR = LinearRegression()\nmodel_LR.fit(X_train, Y_train)\nY_pred = model_LR.predict(X_valid)\n\nprint(mean_absolute_percentage_error(Y_valid, Y_pred))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-14T19:56:14.894336Z","iopub.execute_input":"2025-06-14T19:56:14.894659Z","iopub.status.idle":"2025-06-14T19:56:15.011384Z","shell.execute_reply.started":"2025-06-14T19:56:14.894633Z","shell.execute_reply":"2025-06-14T19:56:15.010437Z"}},"outputs":[],"execution_count":null},{"cell_type":"code","source":"\n# Save predictions alongside their true values for inspection\nresults = pd.DataFrame({\n    'Actual': Y_valid,\n    'Predicted': Y_pred\n})\n\nresults.to_csv(\"predictions_linear_regression.csv\", index=False)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-06-14T19:56:15.012355Z","iopub.execute_input":"2025-06-14T19:56:15.012647Z","iopub.status.idle":"2025-06-14T19:56:15.048033Z","shell.execute_reply.started":"2025-06-14T19:56:15.012619Z","shell.execute_reply":"2025-06-14T19:56:15.047223Z"}},"outputs":[],"execution_count":null}]}